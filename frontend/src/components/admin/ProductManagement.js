import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';

const ProductManagement = () => {
  const [products, setProducts] = useState([]);
  const [newProduct, setNewProduct] = useState({
    name: '',
    description: '',
    price: 0,
    imageUrl: '',
    
  });
  const [editingProduct, setEditingProduct] = useState(null);
  const [message, setMessage] = useState('');

  // ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ localStorage
  const currentUser = JSON.parse(localStorage.getItem("user"));
  const isAdmin = currentUser?.isAdmin === true;

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get('https://backendshopphone-3.onrender.com/api/products');
        setProducts(response.data);
      } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i s·∫£n ph·∫©m:', error);
        setMessage('Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!');
      }
    };

    fetchProducts();
  }, []);

  const handleCreateProduct = async (e) => {
    e.preventDefault();
    if (!isAdmin) return;

    const productWithId = {
      ...newProduct,
      id: `sp${Date.now()}` // üõ†Ô∏è T·∫°o id t·ª± ƒë·ªông
    };

    try {
      const response = await axios.post(
        'https://backendshopphone-3.onrender.com/api/products',
        productWithId
      );
      setProducts([...products, response.data]);
      setNewProduct({ name: '', description: '', price: 0, imageUrl: '' });
      setMessage('‚úÖ T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!');
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o s·∫£n ph·∫©m:', error.response?.data || error.message);
      setMessage('‚ùå T·∫°o s·∫£n ph·∫©m th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
    }
  };

  const handleEditProduct = (product) => {
    if (!isAdmin) return;
    setEditingProduct(product);
    setNewProduct({
      name: product.name,
      description: product.description,
      price: product.price,
      imageUrl: product.imageUrl,
    });
  };

  const handleUpdateProduct = async (e) => {
    e.preventDefault();
    if (!isAdmin) return;

    try {
      const response = await axios.put(
        `https://backendshopphone-3.onrender.com/api/products/${editingProduct._id}`,
        newProduct
      );
      const updatedProducts = products.map((p) =>
        p._id === response.data._id ? response.data : p
      );
      setProducts(updatedProducts);
      setEditingProduct(null);
      setMessage('‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!');
    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', error);
      setMessage('‚ùå C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
    }
  };

  const handleDeleteProduct = async (productId) => {
    if (!isAdmin) return;

    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?')) {
      try {
        await axios.delete(`https://backendshopphone-3.onrender.com/api/products/${productId}`);
        setProducts(products.filter((p) => p._id !== productId));
        setMessage('‚úÖ X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!');
      } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:', error);
        setMessage('‚ùå X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!');
      }
    }
  };

  return (
    <div className="container mt-4">
      <h2>Qu·∫£n L√Ω S·∫£n Ph·∫©m</h2>
      <Link to="/user-management" className="btn btn-secondary mb-3">Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</Link>

      {message && <p className="alert alert-info">{message}</p>}

      {/* ‚úÖ Form th√™m/s·ª≠a s·∫£n ph·∫©m (ch·ªâ admin m·ªõi th·∫•y) */}
      {isAdmin ? (
        <>
          <h3>{editingProduct ? 'S·ª≠a S·∫£n Ph·∫©m' : 'Th√™m S·∫£n Ph·∫©m M·ªõi'}</h3>
          <form onSubmit={editingProduct ? handleUpdateProduct : handleCreateProduct}>
            <div className="mb-3">
              <label className="form-label">T√™n S·∫£n Ph·∫©m</label>
              <input
                type="text"
                className="form-control"
                value={newProduct.name}
                onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
                required
              />
            </div>
            <div className="mb-3">
              <label className="form-label">M√¥ T·∫£</label>
              <textarea
                className="form-control"
                value={newProduct.description}
                onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}
                required
              />
            </div>
            <div className="mb-3">
              <label className="form-label">Gi√°</label>
              <input
                type="number"
                className="form-control"
                value={newProduct.price}
                onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })}
                required
              />
            </div>
            <div className="mb-3">
              <label className="form-label">·∫¢nh</label>
              <input
                type="url"
                className="form-control"
                value={newProduct.imageUrl}
                onChange={(e) => setNewProduct({ ...newProduct, imageUrl: e.target.value })}
                required
              />
            </div>
            <button type="submit" className="btn btn-success">
              {editingProduct ? 'C·∫≠p Nh·∫≠t S·∫£n Ph·∫©m' : 'Th√™m S·∫£n Ph·∫©m'}
            </button>
          </form>
        </>
      ) : (
        <p className="text-danger">üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m/s·ª≠a s·∫£n ph·∫©m.</p>
      )}

      {/* Danh s√°ch s·∫£n ph·∫©m */}
      <h3 className="mt-4">Danh S√°ch S·∫£n Ph·∫©m</h3>
      <table className="table">
        <thead>
          <tr>
            <th>T√™n</th>
            <th>M√¥ t·∫£</th>
            <th>Gi√°</th>
            <th>·∫¢nh</th>
            {isAdmin && <th>H√†nh ƒë·ªông</th>}
          </tr>
        </thead>
        <tbody>
          {products.map((product) => (
            <tr key={product._id}>
              <td>{product.name}</td>
              <td>{product.description}</td>
              <td>{Number(product.price).toLocaleString()} VNƒê</td>
              <td>
                <img src={product.imageUrl} alt={product.name} style={{ maxWidth: '100px' }} />
              </td>
              {isAdmin && (
                <td>
                  <button className="btn btn-primary btn-sm me-2" onClick={() => handleEditProduct(product)}>
                    S·ª≠a
                  </button>
                  <button className="btn btn-danger btn-sm" onClick={() => handleDeleteProduct(product._id)}>
                    X√≥a
                  </button>
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ProductManagement;
